<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	backgroundColor="#333333">
	<mx:Script>
		<![CDATA[
			import com.noteflight.standingwave3.sources.NoiseSource;
			import com.noteflight.Rompler.ToneControlFilter;
			import com.noteflight.standingwave3.filters.EchoFilter;
			import com.noteflight.standingwave3.filters.BiquadFilter;
			import com.noteflight.standingwave3.filters.FadeOutFilter;
			import com.noteflight.standingwave3.filters.FadeInFilter;
			import com.noteflight.standingwave3.generators.FadeEnvelopeGenerator;
			import com.noteflight.Rompler.RomplerSource;
			import com.noteflight.standingwave3.elements.Sample;
			import com.noteflight.standingwave3.filters.ResamplingFilter;
			import com.noteflight.standingwave3.sources.SineSource;
			import com.noteflight.standingwave3.filters.AmpFilter;
			import com.noteflight.standingwave3.generators.ADSREnvelopeGenerator;
			import com.noteflight.standingwave3.filters.CacheFilter;
			import com.noteflight.standingwave3.performance.AudioPerformer;
			import com.noteflight.standingwave3.performance.ListPerformance;
			import com.noteflight.standingwave3.filters.PanFilter;
			import com.noteflight.standingwave3.filters.GainFilter;
			import com.noteflight.standingwave3.generators.SoundGenerator;
			import com.noteflight.standingwave3.elements.AudioDescriptor;
			import com.noteflight.standingwave3.sources.SoundSource;
			import com.noteflight.standingwave3.output.AudioPlayer;
			import com.noteflight.standingwave3.filters.StandardizeFilter;
			
			private var ad1:AudioDescriptor = new AudioDescriptor(22050, 1);
			private var ad2:AudioDescriptor = new AudioDescriptor(22050, 2);
			private var ad3:AudioDescriptor = new AudioDescriptor(44100, 1);
			private var ad4:AudioDescriptor = new AudioDescriptor(44100, 2);
			
			[Bindable]
			private var player:AudioPlayer = new AudioPlayer(4096);
			
			// Embedded sound samples for testing
			[Embed(source="assets/violin.mp3")]
			private var violinSample:Class;
			
			[Embed(source="assets/viola.mp3")]
			private var violaSample:Class;
			
			[Embed(source="assets/cello.mp3")]
			private var celloSample:Class;
			
			/**
			 * Test that basic sound source with gain, pan, and performance works
			 */
			 
			private function soundSourceTest():void 
			{
				// We'll add all the notes we make to this list performance
				var lp:ListPerformance = new ListPerformance();
				
				// We'll clone this violin sample for everything we need
				var violin:SoundSource = new SoundSource(new violinSample(), ad3);
				
				// Pump it through gain Filter 
				var gf:GainFilter = new GainFilter(violin.clone(), 0.25);
				
				// Put it through a pan filter and add it to the performance
				// Note that the whole performance must be either stereo or mono!
				var pf1:PanFilter = new PanFilter(gf.clone(), -0.75); // left
				var pf2:PanFilter = new PanFilter(gf.clone(), 0.75); // right
				lp.addSourceAt(0, pf1);
				lp.addSourceAt(2, pf2);
				
				// Note that this is inefficient, as it doubles the processing
				//  through the entire chain... 2x SoundSource, 2x GainFilter, 2x PanFilter
				// See soundGeneratorTest() for a better way!
				
				var ap:AudioPerformer = new AudioPerformer(lp);
				player.play(ap);
			
			}
			
			/**
			 * Test that CacheFilter works correctly, in line with sound sources
			 * and filters and performances.
			 */
			
			private function soundCacheTest():void 
			{
				var lp:ListPerformance = new ListPerformance();
				
				var violin:SoundSource = new SoundSource(new violinSample(), ad4);
				var vc:CacheFilter = new CacheFilter(violin);
				vc.fill();
				
				lp.addSourceAt(0, vc.clone());
				lp.addSourceAt(7, vc.clone());
				
				var ap:AudioPerformer = new AudioPerformer(lp);
				
				var outCache:CacheFilter = new CacheFilter(ap);
				
				player.play(outCache);
			
			}
			
			/**
			 * Test that enveloping works correctly, in line with sound sources
			 * and filters and performances.
			 */
			
			private function envelopeTest():void  
			{
				// We'll add all the notes we make to this list performance
				var lp:ListPerformance = new ListPerformance();
				
				// We'll clone this violin sample for everything we need
				var violin:SoundSource = new SoundSource(new violinSample(), ad1);
				var vc:CacheFilter = new CacheFilter(violin);
			
				// Make an envelope
				var eg:ADSREnvelopeGenerator = new ADSREnvelopeGenerator(ad1, 0.5, 0.5, 0.5, 0.5, 0.5);
				// eg.fill(); // this would fill the envelope and make subsequent processing faster
				
				// Put it through some amp filters and add it to the performance
				var af1:AmpFilter = new AmpFilter(vc.clone(), eg);
				var af2:AmpFilter = new AmpFilter(vc.clone(), eg);
				lp.addSourceAt(0, af1);
				lp.addSourceAt(2, af2);
				
				var ap:AudioPerformer = new AudioPerformer(lp);
				
				// Standardize Filter turns it into 44.1k stereo, suitable for AudioPlayer
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				
				player.play(sf);
			
			}
			
			/**
			 * Basic sine wavetable oscillator test
			 */
			private function wavetableTest():void
			{
				var lp:ListPerformance = new ListPerformance(); 
				
				var sine1:SineSource = new SineSource(ad1, 1, 220, 1);
				var sine2:SineSource = new SineSource(ad1, 1, 440, 1);
				var sine3:SineSource = new SineSource(ad1, 1, 880, 1);
				
				lp.addSourceAt(0, sine3);
				lp.addSourceAt(2, sine2);
				lp.addSourceAt(4, sine1);
								
				var ap:AudioPerformer = new AudioPerformer(lp);
				ap.mixGain = 0.25;
				
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				player.play(sf);
				
			}
			
			/**
			 * Test basic pitch shifting (Resampling) on sine source.
			 * This does about 12 voices at a time in stereo with no caching.
			 */
			private function resampleTest():void {
				
				var lp:ListPerformance = new ListPerformance(); 
				
				var sine:SineSource = new SineSource(ad1, 0.5, 440, 1);
				var cf:CacheFilter = new CacheFilter(sine);
				
				// One cached source is resampled to 4 different speeds
				var sine1:ResamplingFilter = new ResamplingFilter(cf.clone(), 0.666);
				var sine2:ResamplingFilter = new ResamplingFilter(cf.clone(), 0.777);
				var sine3:ResamplingFilter = new ResamplingFilter(cf.clone(), 0.888);
				var sine4:ResamplingFilter = new ResamplingFilter(cf.clone(), 0.999);
				
				lp.addSourceAt(0, sine1);
				lp.addSourceAt(1, sine2);
				lp.addSourceAt(2, sine3);
				lp.addSourceAt(3, sine4);
								
				var ap:AudioPerformer = new AudioPerformer(lp);
				ap.mixGain = 0.25;
				
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				player.play(sf);
				
			}
			
			/**
			 * Basic Rompler test with sound generators and envelopes.
			 * This is kind of a mess, but it demonstrates how to get your
			 * loop points in, and reuse a lot of generators.
			 */
			 
			private function soundGeneratorTest():void
			{
				var lp:ListPerformance = new ListPerformance();  
				
				var violin:SoundGenerator = new SoundGenerator(new violinSample(), ad1);
				// violin.fill(); // to fully extract the sample
				
				// Reuse the same 
				var eg:ADSREnvelopeGenerator = new ADSREnvelopeGenerator(ad1, 0.001, 0.001, 6, 1, 0.3);
				
				var r1:RomplerSource = new RomplerSource(violin, eg);
				r1.amplitude = 0.3;
				r1.loopStartFrame = 205244/2; // loop points halfed due to sample rate
				r1.loopEndFrame = (205244+3196)/2; // 
				r1.frequencyShift = 0.666; 
				r1.pan = -0.75;
				
				var r2:RomplerSource = RomplerSource(r1.clone());
				r2.frequencyShift = 0.875;
				 
				var r3:RomplerSource = RomplerSource(r1.clone());
				r3.frequencyShift = 1.166;
				 
				lp.addSourceAt(0, r1); 
				lp.addSourceAt(2, r2);
				lp.addSourceAt(6, r3);
				lp.addSourceAt(8, r1.clone()); 
				lp.addSourceAt(10, r2.clone());
				lp.addSourceAt(14, r3.clone());
				
				var viola:SoundGenerator = new SoundGenerator(new violaSample(), ad1);
				
				var r4:RomplerSource = new RomplerSource(viola, eg);
				r4.amplitude = 0.4;
				r4.loopStartFrame = 240528/2;
				r4.loopEndFrame = (240528+10028)/2;
				r4.frequencyShift = 0.666;
				r4.pan = 0.75;
				
				var r5:RomplerSource = RomplerSource(r4.clone());
				r2.frequencyShift = 0.875;
				 
				var r6:RomplerSource = RomplerSource(r4.clone());
				r6.frequencyShift = 1.166;
				
				lp.addSourceAt(0, r6); 
				lp.addSourceAt(2, r5); 
				lp.addSourceAt(6, r4);
				lp.addSourceAt(8, r6.clone()); 
				lp.addSourceAt(10.5, r5.clone());
				lp.addSourceAt(13.5, r4.clone());
				
				var cello:SoundGenerator = new SoundGenerator(new celloSample(), ad1);
				
				var r7:RomplerSource = new RomplerSource(cello, eg);
				r7.amplitude = 0.5;
				r7.loopStartFrame = 75072/2;
				r7.loopEndFrame = (75072+8544)/2;
				r7.frequencyShift = 0.875;
				r7.pan = 0;
				
				var r8:RomplerSource = RomplerSource(r7.clone());
				r8.frequencyShift = 1.0;
				
				var r9:RomplerSource = RomplerSource(r7.clone());
				r9.frequencyShift = 1.0;
				  
				lp.addSourceAt(0, r7); 
				lp.addSourceAt(2, r8); 
				lp.addSourceAt(6, r9);
				lp.addSourceAt(8, r7.clone()); 
				lp.addSourceAt(10.5, r8.clone());
				lp.addSourceAt(17.5, r9.clone());
				
				var ap:AudioPerformer = new AudioPerformer(lp);  
				ap.mixGain = 0.333;
				
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				player.play(sf);
				
			}
			
			/* Test fade envelopes and fade filters. They're like envelopes but simpler! */
			
			private function fadeTest():void
			{
				// We'll add all the notes we make to this list performance
				var lp:ListPerformance = new ListPerformance();
				
				var sine:SineSource = new SineSource(ad1, 2, 440, 1);
				var cf:CacheFilter = new CacheFilter(sine);
				
				// Make two fades
				var fadeInEnv:FadeEnvelopeGenerator = new FadeEnvelopeGenerator(ad1, 1, FadeEnvelopeGenerator.FADE_IN);
				var fadeOutEnv:FadeEnvelopeGenerator = new FadeEnvelopeGenerator(ad1, 1, FadeEnvelopeGenerator.FADE_OUT);
				
				// Put it through some fade filters and add it to the performance
				var ff1:FadeInFilter = new FadeInFilter(cf, fadeInEnv);
				var ff2:FadeOutFilter = new FadeOutFilter(cf, fadeOutEnv, 1.0);
				
				lp.addSourceAt(0, ff1);
				lp.addSourceAt(4, ff2);
				
				var ap:AudioPerformer = new AudioPerformer(lp);
				ap.mixGain = 0.25;
				
				// Standardize Filter turns it into 44.1k stereo, suitable for AudioPlayer
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				
				player.play(sf);
			
			}
		 	
		 	/* 
		 	 * Test all our diff biquad types.
		 	 * Sorry for the noise blast, but this is the best way to hear whether it's working right!
		 	 */	
			private function filterTest():void {
				var lp:ListPerformance = new ListPerformance();
				
				var noise:NoiseSource = new NoiseSource(ad4, 4, 0.5);
				var vc:CacheFilter = new CacheFilter(noise);
				
				var bf1:BiquadFilter = new BiquadFilter(vc.clone(), BiquadFilter.LOW_PASS_TYPE, 500, 3);
				var bf2:BiquadFilter = new BiquadFilter(vc.clone(), BiquadFilter.HIGH_PASS_TYPE, 500, 3);
				var bf3:BiquadFilter = new BiquadFilter(vc.clone(), BiquadFilter.BAND_PASS_TYPE, 500, 3);
				
				lp.addSourceAt(0, bf1); 
				lp.addSourceAt(5, bf2);
				lp.addSourceAt(10, bf3);
				
				var ap:AudioPerformer = new AudioPerformer(lp);
				
				// Standardize Filter turns it into 44.1k stereo, suitable for AudioPlayer
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				
				player.play(sf);
				
			}
			
			/* 
		 	 * Test our peak EQ / tone control.
		 	 * I'm sorry this sounds horrific, but noise is the BEST test of an EQ :)
		 	 */	
			private function eqTest():void {
				var lp:ListPerformance = new ListPerformance(); 
				
				var noise:NoiseSource = new NoiseSource(ad4, 5, 0.25);
				var vc:CacheFilter = new CacheFilter(noise);
				
				var tf1:ToneControlFilter = new ToneControlFilter(vc.clone());
				tf1.bass = 24; // bass boost
				tf1.bassFrequency = 100;
				
				var tf2:ToneControlFilter = new ToneControlFilter( vc.clone() );
				tf2.treble = 24; // treble boost
				tf2.trebleFrequency = 3000;
				
				lp.addSourceAt(0, vc);
				lp.addSourceAt(6, tf1);
				lp.addSourceAt(12, tf2);
				
				var ap:AudioPerformer = new AudioPerformer(lp);
				
				// Standardize Filter turns it into 44.1k stereo, suitable for AudioPlayer
				var sf:StandardizeFilter = new StandardizeFilter(ap);
				
				player.play(sf);
				
			}
			
			/* test the delay method and echo filter */
			
			private function echoTest():void  
			{
				var lp:ListPerformance = new ListPerformance();
				
				var beep1:PanFilter = new PanFilter(new SineSource(ad3, 0.1, 600, 1), -0.75, -12);
				var beep2:PanFilter = new PanFilter(new SineSource(ad3, 0.1, 300, 1), 0, -12);
				var beep3:PanFilter = new PanFilter(new SineSource(ad3, 0.1, 200, 1), 0.75, -12);
				
				lp.addSourceAt(0, beep1);
				lp.addSourceAt(2, beep2);
				lp.addSourceAt(4, beep3);
				
				var ap:AudioPerformer = new AudioPerformer(lp); 
				ap.duration = 20; // extend performance so we can hear the echos 
				ap.mixGain = 1;
				
				var ef:EchoFilter = new EchoFilter(ap, 0.666, 0.5, 0.5);
				
				var sf:StandardizeFilter = new StandardizeFilter(ef);
				
				player.play(sf);
			
			}
			
			
		]]>
	</mx:Script>
	
	
	<mx:VBox>
		
		<mx:Label text="Just a bunch of tests to exercise Standing Wave 3. Turn down speakers. :)"
			color="#cccccc"/>
		
		<mx:Label text="CPU: {player.cpuPercentage}%" color="#ffffff" />
		
		<mx:Button label="Sound Source Test" click="soundSourceTest();" />
		
		<mx:Button label="Sound Cache Test" click="soundCacheTest();" />
		
		<mx:Button label="Wavetable Test" click="wavetableTest();" />
		
		<mx:Button label="Resample Test" click="resampleTest();" />
		
		<mx:Button label="Envelope Test" click="envelopeTest();" />
		
		<mx:Button label="Fades Test" click="fadeTest();" />
		
		<mx:Button label="Sound Generator Test" click="soundGeneratorTest();" />
		
		<mx:Button label="Filter test" click="filterTest();" />
		
		<mx:Button label="EQ test" click="eqTest();" />
		
		
		<mx:Button label="Echo Test" click="echoTest(); " />
		
	</mx:VBox>
	
</mx:Application>
